statements	:	NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement		:	KEYWORD:DE expr?
						:	KEYWORD:CHALAO
						:	KEYWORD:ATKAO
						:	expr

expr    		: KEYWORD:CHOL IDENTIFIER EQ expr
						: comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr		: NOY comp-expr
						: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*
				
arith-expr	: term ((PLUS|MINUS) term)*

term    		: factor ((MUL|DIV) factor)*

factor  		: (PLUS|MINUS) factor
						:	power

power				:	call (POW factor)*

call				:	atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom				:	INT|FLOAT|STRING|IDENTIFIER
						: LPAREN expr RPAREN
						:	list-expr
						: if-expr
						: for-expr
						: while-expr
						: func-def

list-expr		:	LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:JODI expr KEYWORD:TARPOR
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:SESH|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:NAHOLE JODI expr KEYWORD:TARPOR
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:SESH|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:NAHOLE
              statement
            | (NEWLINE statements KEYWORD:SESH)

for-expr		: KEYWORD:GHORAO IDENTIFIER EQ expr KEYWORD:THEKE expr 
							(KEYWORD:baro expr)? KEYWORD:TARPOR
							statement
						| (NEWLINE statements KEYWORD:SESH)

while-expr	: KEYWORD:JOTOKHON expr KEYWORD:TARPOR
							statement
						| (NEWLINE statements KEYWORD:SESH)

func-def		:	KEYWORD:KAAJ IDENTIFIER?
							LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
							(ARROW expr)
						| (NEWLINE statements KEYWORD:SESH)